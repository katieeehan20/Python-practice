{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2807fcf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#try...except : for handling runtime exceptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9ea6d854",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kate is doing well.\n"
     ]
    }
   ],
   "source": [
    "#second block is not executed because the first block doesn't create error\n",
    "\n",
    "try:\n",
    "    print(\"Kate is doing well.\")\n",
    "except:\n",
    "    print(\"Print this if there is an error\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b38693a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Will this work out?\n",
      "I guess it didn't work out!\n"
     ]
    }
   ],
   "source": [
    "#because x/0 is a runtime error, after first line in first block, the second block gets printed\n",
    "\n",
    "try:\n",
    "    print(\"Will this work out?\")\n",
    "    x/0\n",
    "except:\n",
    "    print(\"I guess it didn't work out!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "19232c2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#beware of indentation\n",
    "\n",
    "def run_score(x,y):    \n",
    "    try:\n",
    "        return(x/y)\n",
    "    except:\n",
    "        return(x**y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d4a06255",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6666666666666666"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_score(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1d213b33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_score(2,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4bfa6ce4",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for ** or pow(): 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-15-9cd93b8a1a6a>\u001b[0m in \u001b[0;36mrun_score\u001b[1;34m(x, y)\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m         \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m     \u001b[1;32mexcept\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'int' and 'str'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-18-2c05e228d52e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mrun_score\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'3'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<ipython-input-15-9cd93b8a1a6a>\u001b[0m in \u001b[0;36mrun_score\u001b[1;34m(x, y)\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[1;32mexcept\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m         \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "run_score(2,'3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "58051915",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_score(x,y):    \n",
    "    try:\n",
    "        return(x/y)\n",
    "    except:\n",
    "        return(35*10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f63e8a69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "350"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_score(2,'3')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
